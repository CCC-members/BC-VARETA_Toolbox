function PlotLeadfield(reportPath, Headmodel,Cdata,Shead,Cortex)

if(~isfolder(reportPath))
    mkdir(reportPath);
end

template = load('axes.mat');
colorMap = load('tools/mycolormap_brain_basic_conn.mat');
currentAxes = template.axes;
elecName = 'Fz';
isScalp  = false;

Channel     = Cdata.Channel;
elecIndex   = find(ismember({Channel.Name},elecName),1);
if(isempty(elecIndex))
    elecIndex = 1;
end
%% initial computations
%% plot Lead Field
[Ne,Nv]     = size(Headmodel.Gain);
Nv          = Nv/3;
XYZ         = Cortex.Vertices;
Kn          = reshape(Headmodel.Gain,Ne,3,Nv);
Kn          = permute(Kn,[1,3,2]);
Kq          = permute(Kn, [1 3 2]);
Kq          = permute(Kq, [3 2 1]);
Kqm         = sqrt(dot(Kq,Kq,2));
KqmC        = Kqm(:,:,elecIndex);


quiver3(currentAxes,XYZ(:,1),XYZ(:,2),XYZ(:,3), ...
    Kq(:,1,elecIndex),Kq(:,2,elecIndex),Kq(:,3,elecIndex), ...
    'LineWidth',2,'Color',[0 0 1],'AutoScaleFactor',5);
hold on;

%% define electrode to show and Marker size
patch( currentAxes,...
    'Faces',            Cortex.Faces, ...
    'Vertices',         Cortex.Vertices,...
    'VertexNormals',    Cortex.VertNormals, ...
    'VertexNormalsMode', 'auto',...
    'FaceNormals',      [],...
    'FaceNormalsMode',  'auto',...
    'FaceVertexCData',  KqmC, ...
    'FaceColor',        'inter', ...
    'FaceAlpha',        1, ...
    'AlphaDataMapping', 'none', ...
    'EdgeColor',        'none', ...
    'EdgeAlpha',        1, ...
    'LineWidth',         0.5,...
    'LineJoin',         'miter',...
    'AmbientStrength',  0.5, ...
    'DiffuseStrength',  0.5, ...
    'SpecularStrength', 0.2, ...
    'SpecularExponent', 1, ...
    'SpecularColorReflectance', 0.5, ...
    'FaceLighting',     'gouraud', ...
    'EdgeLighting',     'gouraud', ...
    'Tag',              'AnatSurface');
hold on;

% plotting scalp
if(isScalp)
    patch( currentAxes,...
        'Faces',            Shead.Faces, ...
        'Vertices',         Shead.Vertices,...
        'VertexNormals',    Shead.VertNormals, ...
        'VertexNormalsMode', 'auto',...
        'FaceNormals',      [],...
        'FaceNormalsMode',  'auto',...
        'FaceVertexCData',  [], ...
        'FaceColor',        [0.7 0.7 0.7], ...
        'FaceAlpha',        .10, ...
        'AlphaDataMapping', 'none', ...
        'EdgeColor',        'none', ...
        'EdgeAlpha',        .10, ...
        'LineWidth',         0.5,...
        'LineJoin',         'miter',...
        'AmbientStrength',  0.5, ...
        'DiffuseStrength',  0.5, ...
        'SpecularStrength', 0.2, ...
        'SpecularExponent', 1, ...
        'SpecularColorReflectance', 0.5, ...
        'FaceLighting',     'gouraud', ...
        'EdgeLighting',     'gouraud', ...
        'Tag',              'AnatSurface');
    hold on;
end

% Ploting channles
ChanLoc         = [Channel.Loc]';
ctColor         = [.9,.9,0]; % Yellow
nVert = 34;
ElectrodeGrid = CreateGeometry3DElectrode_2(ChanLoc,'EEG',Shead, ctColor, nVert);
patch(currentAxes,...
    'Faces',               ElectrodeGrid.Faces, ...
    'Vertices',            ElectrodeGrid.Vertices,...
    'FaceVertexCData',     ElectrodeGrid.FaceVertexCData, ...
    'FaceVertexAlphaData', ElectrodeGrid.FaceVertexAlphaData, ...
    'FaceColor',           'flat', ...
    'FaceAlpha',           'flat', ...
    'AlphaDataMapping',    'none', ...
    ElectrodeGrid.Options{:});

% Ploting selected channel
SelectChannel         = Cdata.Channel(elecIndex);
SelectChanLoc         = [SelectChannel.Loc]';
ctColor         = [1 0 0];
ElectrodeGrid = CreateGeometry3DElectrode_2(SelectChanLoc,'EEG',Shead, ctColor, nVert);
patch(currentAxes,...
    'Faces',               ElectrodeGrid.Faces, ...
    'Vertices',            ElectrodeGrid.Vertices,...
    'FaceVertexCData',     ElectrodeGrid.FaceVertexCData, ...
    'FaceVertexAlphaData', ElectrodeGrid.FaceVertexAlphaData, ...
    'FaceColor',           'flat', ...
    'FaceAlpha',           'flat', ...
    'AlphaDataMapping',    'none', ...
    ElectrodeGrid.Options{:});
colormap(currentAxes,colorMap.cmap_a);
fig = figure("Name","Lead field","Color","w", 'Position', get(0, 'Screensize'),'Visible','off');
set(currentAxes,"Parent",fig);
rotate3d(currentAxes,'on');
axis(currentAxes,'equal');
axis(currentAxes,'off');

% right view
view(currentAxes,0,0);
export_fig(fullfile(reportPath,'leadfield_right'),'-transparent','-png');
% left view
view(currentAxes,180,0);
export_fig(fullfile(reportPath,'leadfield_left'),'-transparent','-png');
% top view
view(currentAxes,0,90);
export_fig(fullfile(reportPath,'leadfield_top'),'-transparent','-png');
% front view
view(currentAxes,90,0);
export_fig(fullfile(reportPath,'leadfield_front'),'-transparent','-png');
close(fig);

end

